# -*- coding: utf-8 -*-
"""최종1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vZ0mBfcgFA5cBeWi1A913fQrOx4TtbZc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import pymysql
from sklearn.feature_extraction.text import TfidfVectorizer
from sqlalchemy import create_engine
from flask import Flask, request, jsonify
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import linear_kernel

from numpy import dot
from numpy.linalg import norm
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

@app.route('/process', methods=['POST'])
def process():
    userid = request.json.get('user_id')
    result_dict = get_user_keywords(userid)
    print(123)
    print(result_dict)
    return jsonify(result_dict)
#---------------------------------------------------MYSQL 연결-------------------------------------------------------#

host = 'project-db-campus.smhrd.com'       # MySQL 서버 주소 (로컬일 경우 localhost)
port = 3307              # MySQL 포트 (기본값 3306)
user = 'campus_24K_LI_p2_2'            # MySQL 사용자 계정
password = 'smhrd2'    # MySQL 비밀번호
database = 'campus_24K_LI_p2_2'    # 사용할 데이터베이스 이름

# 연결 생성
connection = pymysql.connect(
    host=host,
    port=port,
    user=user,
    password=password,
    database=database
)

def get_user_keywords(userid):
    
    with connection.cursor() as cursor:
        sql = "SELECT GROUP_CONCAT(keyword_nm) FROM tb_user_keyword u INNER JOIN tb_keyword t ON u.keyword_cd = t.keyword_cd WHERE user_id = %s GROUP BY u.user_id;"
        cursor.execute(sql, (userid,))
        result = cursor.fetchone()
    if result:
        recommended = recommend_studies(" ".join(result))

        result_dict = printStudy(recommended)
        return result_dict

    # return ""

# user_keywords = get_user_keywords('result')


tb_keyword = pd.read_csv('file/tb_keyword.csv')
tb_study = pd.read_csv('file/tb_study.csv')
tb_study_keyword = pd.read_csv('file/tb_study_keyword.csv')
tb_study_member = pd.read_csv('file/tb_study_member.csv')
tb_study_review = pd.read_csv('file/tb_study_review.csv')
tb_study_review_keyword = pd.read_csv('file/tb_study_review_keyword.csv')
tb_user = pd.read_csv('file/tb_user.csv')
tb_user_keyword = pd.read_csv('file/tb_user_keyword.csv')

a1 = pd.merge(tb_user_keyword,tb_keyword, on='keyword_cd', how = "left")
a2 = a1[["user_id", "keyword_nm"]]
a3 = a2.groupby("user_id").agg({
    "keyword_nm": lambda x: ', '.join(map(str, x)),  # keyword_cd를 쉼표로 구분된 문자열로 묶음
}).reset_index()
a101 = tb_study[["study_cd","study_title"]]
a4 = pd.merge(tb_study_keyword,tb_keyword, on='keyword_cd', how = "left")
a5 = a4[["study_cd", "keyword_nm"]]
a6 = a5.groupby("study_cd").agg({
    "keyword_nm": lambda x: ', '.join(map(str, x)),  # keyword_cd를 쉼표로 구분된 문자열로 묶음
}).reset_index()
a7 = pd.merge(a6, a101, on='study_cd', how = "left")
a7['content'] = a7['keyword_nm'] + ' ' + a7['study_title']
# 키워드 확장 함수
def expand_keywords(keywords):
    # 문자열을 공백 기준으로 분리하여 리스트로 만듦
    expanded = set(keywords.split())  # 공백 기준으로 분리
    for keyword in keywords.split():  # 키워드가 공백으로 분리되어 있는 상태
        if keyword in a7["content"]:
            expanded.update(a3[keyword])
    return list(expanded)

# 추천 함수
def recommend_studies(user_keywords):
 
    # 키워드 확장
    expanded_keywords = expand_keywords(user_keywords)
    user_query = " ".join(expanded_keywords)

    # 유사도 계산
    user_vector = tfidf_vectorizer.transform([user_query])
    cosine_similarities = cosine_similarity(user_vector, tfidf_matrix).flatten()

    # 유사도를 새로운 열로 추가
    a7["similarity"] = cosine_similarities

    # 유사도를 기준으로 상위 10개 스터디 추천
    recommended_studies = a7.sort_values(by="similarity", ascending=False).head(20)

    # 추천 목록 반환
    return recommended_studies[["study_title", "similarity"]].to_dict(orient="records")

# TF-IDF 벡터화
study_keywords = a7["content"].tolist()
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(study_keywords)

# 테스트
# recommended = recommend_studies(user_keywords)
 
# 출력
def printStudy(recommended):
   
    print(recommended)
    dict1 = {}
    list1 = []
    for study in recommended:
        list1.append(study['study_title'])

        # print(f"{study['study_title']} (유사도: {study['similarity']:.2f})")
    dict1['title'] = list1
    return dict1

@app.route('/process-form', methods=['POST'])
def processForm():
    data = request.json  # JSON 데이터 받기
    print(data)
    # 데이터 처리
    result = {'message': f"Received: {data.get('input_id')}"}
    print(result)
    return jsonify(result)

if __name__ == '__main__':
    app.debug = True # ctrl+s(저장) 데이터 반영 
    app.run('127.0.0.1',port=8083)
